SmashWebServer:

	On game start:
		- Client notifies server that he wants to play, sending his "product-key" to the server
		- Server sends back a key that is valid for x(600) seconds without update from client
		- each client product key is "valid" for y(10) different IP-adresses and can only have z(3?) amounts of games "active" at same time
		
	During gameplay:
		- Client sends hashed values telling server "how it goes" on his given key [status update]
		- During Pause : [pausing game for a longer time might result in your highscore being invalidated on server]

	After level:
		- Client sends his final result to server

	After Game-Over:
		- client sends his final result to server
		
		
Requests:
	myWebServer?request=begin&data={json}
		(tries 3 times during 3s, if no response, launches game anyway but without "synchronized game key" (might recover later if it receives one during the upcoming seconds))
			product_key		:	{client product key unique for each installation of product}
			level			:	{wanted level}
			user_name		:	{player's name -- this will be stored on server when presenting high score values}
			user_id			:	{registered name on web server or ""}
			player_state	:	{if the avatar have state/score/unlocks/weapons and whatnot)
		
		response:
			status			:	0 = OK [ -n .. n ]
			server_key		:	9a00ab0a900a8b (unique_id of the game)
			
			

	myWebServer?request=status&key=server_key&data={json}
			--fire and forget--
			-- key		:	{the key sent by server} (sent in http request so we can ease load on server) --
		level	:	1
		kills	:	364
		score	:	4295
		---------------
		energy	:	[0..200]
		gametime	:	1.036987
		t_mult	:	[0/0.5/0.75/1/1.25/1.5/2/4/8]
		seed	:	the randomize seed
		times	:	{all delta times since last status}
		keyboard_states	:	{all keyboard inputs since last status}
		mouse_states	:	{all mouse inputs since last status}
		
	myWebServer?request=final&key=server_key&data={json same as status update}
			-- could be because of dead or level completed --
			-- same data as "status"--
			-- wait for 3 seconds for response from server --
			-- closes game on server --
			
		response:
			status : 	0 = OK [ -n .. n ]
			key	:		{the key sent by server}
			----------------
			top_scores :	{
				[0]	-	user_name : kills : scores : score_position
				[1]	-	
				[2]	-	
				[3]	-	
				[4]	-	
				[5]	-	
				[6]	-	
				[7]	-	
				[8]	-	
				[9]	-	
				[10]	-	
			}
			user	:	{ 
				score_position: [0 .. n]
				kills: 364
				score : 4295
			}
			
			
		
		